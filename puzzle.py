from logic import *

АРыцарь = Символ("А - рыцарь.")
АЛжец = Символ("А - лжец.")

БРыцарь = Символ("Б - рыцарь.")
БЛжец = Символ("Б - лжец.")

ВРыцарь = Символ("В - рыцарь.")
ВЛжец = Символ("В - лжец.")

# Задача 0
# А сказал: "Я и лжец и рыцарь."
знания0 = И(
    Эквивалентность(И(АРыцарь, АЛжец), АРыцарь),
    Эквивалентность(АРыцарь, Не(АЛжец))
)

# Задача 1
# А сказал: "Мы оба лжецы."
# Б ни чего не сказал.
знания1 = И(
    Или(БРыцарь, БЛжец),
    Эквивалентность(И(АЛжец, БЛжец), АРыцарь),
    Эквивалентность(АРыцарь, Не(АЛжец))
)

# Задача 2
# А сказал: "Мы одинаковые."
# Б сказал: "Мы разного вида."
знания2 = И(
    Эквивалентность(И(АРыцарь, БРыцарь), АРыцарь),
    Эквивалентность(И(АЛжец, БЛжец), АРыцарь),
    Эквивалентность(АРыцарь, Не(АЛжец)),

    Эквивалентность(Или(АРыцарь, БРыцарь), БРыцарь),
    Эквивалентность(Или(АЛжец, БЛжец), БРыцарь),
    Эквивалентность(Не(И(АРыцарь, БРыцарь)), БРыцарь),
    Эквивалентность(Не(И(АЛжец, БЛжец)), БРыцарь),
    Эквивалентность(БРыцарь, Не(БЛжец))
)

# Задача 3
# А что то сказал, но вы не услышали.
# Б сказал: "А сказал 'Я лжец'."
# Б сказал: "В - лжец."
# В сказал: "А - рыцарь."
знания3 = И(
    Или(АРыцарь, АЛжец),
    Эквивалентность(АРыцарь, ВРыцарь),
    Эквивалентность(И(АЛжец, ВЛжец), БРыцарь),
    Эквивалентность(И(АРыцарь, ВРыцарь), БЛжец),
    Эквивалентность(Или(АЛжец, БЛжец), ВРыцарь),

    Эквивалентность(АРыцарь, Не(АЛжец)),
    Эквивалентность(БРыцарь, Не(БЛжец)),
    Эквивалентность(ВРыцарь, Не(ВЛжец)),
)


def main():
    символы = [АРыцарь, АЛжец, БРыцарь, БЛжец, ВРыцарь, ВЛжец]
    задания = [
        ("Задание 0", знания0),
        ("Задание 1", знания1),
        ("Задание 2", знания2),
        ("Задание 3", знания3)
    ]
    for задание, знание in задания:
        print(задание)
        if len(знание.операнды) == 0:
            print("    Пока не реализована.")
        else:
            for символ in символы:
                if проверка_моделей(знание, символ):
                    print(f"    {символ}")


if __name__ == "__main__":
    main()
